name: Continuous Integration

on: 
  push:
  pull_request:
    branches:
      - main
      - develop
      - stage



env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx

jobs:

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo "DEBUG=${{ secrets.DEBUG }}" >> .env

          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
          echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "JWT_SIGNING_KEY=${{ secrets.JWT_SIGNING_KEY }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_BACKEND=${{ secrets.EMAIL_BACKEND }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env
          echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env
          echo "DOMAIN=${{ secrets.DOMAIN }}" >> .env
          echo "CELERY_BROKER=${{ secrets.CELERY_BROKER }}" >> .env
          echo "CELERY_BACKEND=${{ secrets.CELERY_BACKEND }}" >> .env




      - name: Add environment variables to .env.db
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.db

          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.db
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.db


      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose.ci.yml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}
      - name: start containers
        run: |
          docker-compose -f docker-compose.ci.yml up -d
      - name: show logs
        run: |
          docker-compose -f docker-compose.ci.yml logs
      - name: show files -  dlete test later
        run: |
          docker-compose -f docker-compose.ci.yml exec -T django_be ls
        # -T flag in docker disables TTL
      - name: run tests
        run: |
          docker-compose -f docker-compose.ci.yml exec -T django_be pytest -p no:warnings

      - name: stop containers
        run: |
          docker-compose -f docker-compose.ci.yml down

